/*
https://mp.weixin.qq.com/s/CCQhHficcLx-UxWzz23RBA
写时复制（Copy-On-Write, COW） 是一种优化技术，常用于提高程序性能，减少内存消耗，并在需要时延迟复制数据。
它的核心思想是在数据被修改之前共享相同的内存，只有在数据被修改时才真正进行复制。
COW通常用于实现高效的内存管理，尤其是在操作系统、虚拟内存管理和数据结构等方面。　

它主要用于操作系统的进程创建（如 fork() 系统调用）和内存映射文件等场景，可以有效减少内存消耗和提高性能。
通过共享内存和延迟复制，COW能够优化内存管理，避免了不必要的复制操作，从而提高了系统的整体效率。　

COW 也用于内存映射文件。操作系统允许将文件的一部分或全部内容映射到内存中。
当多个进程映射同一个文件时，操作系统不会立即将文件的内容复制到每个进程的地址空间，而是让所有进程共享相同的内存区域。
当某个进程修改内存映射的文件内容时，操作系统会通过写时复制将文件内容复制到该进程的地址空间，而其他进程仍然共享原始文件内容。　
*/
#include <unistd.h>
#include <iostream>

int main()
{
    int x = 42;
    pid_t pid = fork();

    if (pid == 0)
    {
        // 子进程
        x = 100; // 修改 x 的值
        std::cout << "Child process x: " << x << std::endl;
    }
    else
    {
        // 父进程
        std::cout << "Parent process x: " << x << std::endl;
    }

    return 0;
}